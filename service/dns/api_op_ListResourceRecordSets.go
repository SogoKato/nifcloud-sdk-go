// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package dns

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/private/protocol"
	"github.com/nifcloud/nifcloud-sdk-go/internal/nifcloudutil"
)

type ListResourceRecordSetsInput struct {
	_ struct{} `type:"structure"`

	Identifier *string `location:"querystring" locationName:"identifier" type:"string"`

	Maxitems *int64 `location:"querystring" locationName:"maxitems" type:"integer"`

	Name *string `location:"querystring" locationName:"name" type:"string"`

	Type *string `location:"querystring" locationName:"type" type:"string"`

	// ZoneID is a required field
	ZoneID *string `location:"uri" locationName:"ZoneID" type:"string" required:"true"`
}

// String returns the string representation
func (s ListResourceRecordSetsInput) String() string {
	return nifcloudutil.Prettify(s)
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ListResourceRecordSetsInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "ListResourceRecordSetsInput"}

	if s.ZoneID == nil {
		invalidParams.Add(aws.NewErrParamRequired("ZoneID"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s ListResourceRecordSetsInput) MarshalFields(e protocol.FieldEncoder) error {

	if s.ZoneID != nil {
		v := *s.ZoneID

		metadata := protocol.Metadata{}
		e.SetValue(protocol.PathTarget, "ZoneID", protocol.StringValue(v), metadata)
	}
	if s.Identifier != nil {
		v := *s.Identifier

		metadata := protocol.Metadata{}
		e.SetValue(protocol.QueryTarget, "identifier", protocol.StringValue(v), metadata)
	}
	if s.Maxitems != nil {
		v := *s.Maxitems

		metadata := protocol.Metadata{}
		e.SetValue(protocol.QueryTarget, "maxitems", protocol.Int64Value(v), metadata)
	}
	if s.Name != nil {
		v := *s.Name

		metadata := protocol.Metadata{}
		e.SetValue(protocol.QueryTarget, "name", protocol.StringValue(v), metadata)
	}
	if s.Type != nil {
		v := *s.Type

		metadata := protocol.Metadata{}
		e.SetValue(protocol.QueryTarget, "type", protocol.StringValue(v), metadata)
	}
	return nil
}

type ListResourceRecordSetsOutput struct {
	_ struct{} `type:"structure"`

	IsTruncated *bool `locationName:"IsTruncated" type:"boolean"`

	MaxItems *int64 `locationName:"MaxItems" type:"integer"`

	NextRecordIdentifier *string `locationName:"NextRecordIdentifier" type:"string"`

	NextRecordName *string `locationName:"NextRecordName" type:"string"`

	NextRecordType *string `locationName:"NextRecordType" type:"string"`

	ResourceRecordSets []ResourceRecordSets `locationName:"ResourceRecordSets" locationNameList:"ResourceRecordSet" type:"list"`
}

// String returns the string representation
func (s ListResourceRecordSetsOutput) String() string {
	return nifcloudutil.Prettify(s)
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s ListResourceRecordSetsOutput) MarshalFields(e protocol.FieldEncoder) error {
	if s.IsTruncated != nil {
		v := *s.IsTruncated

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "IsTruncated", protocol.BoolValue(v), metadata)
	}
	if s.MaxItems != nil {
		v := *s.MaxItems

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "MaxItems", protocol.Int64Value(v), metadata)
	}
	if s.NextRecordIdentifier != nil {
		v := *s.NextRecordIdentifier

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "NextRecordIdentifier", protocol.StringValue(v), metadata)
	}
	if s.NextRecordName != nil {
		v := *s.NextRecordName

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "NextRecordName", protocol.StringValue(v), metadata)
	}
	if s.NextRecordType != nil {
		v := *s.NextRecordType

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "NextRecordType", protocol.StringValue(v), metadata)
	}
	if s.ResourceRecordSets != nil {
		v := s.ResourceRecordSets

		metadata := protocol.Metadata{ListLocationName: "ResourceRecordSet"}
		ls0 := e.List(protocol.BodyTarget, "ResourceRecordSets", metadata)
		ls0.Start()
		for _, v1 := range v {
			ls0.ListAddFields(v1)
		}
		ls0.End()

	}
	return nil
}

const opListResourceRecordSets = "ListResourceRecordSets"

// ListResourceRecordSetsRequest returns a request value for making API operation for
// NIFCLOUD DNS.
//
//    // Example sending a request using ListResourceRecordSetsRequest.
//    req := client.ListResourceRecordSetsRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://pfs.nifcloud.com/api/dns/ListResourceRecordSets.htm
func (c *Client) ListResourceRecordSetsRequest(input *ListResourceRecordSetsInput) ListResourceRecordSetsRequest {
	op := &aws.Operation{
		Name:       opListResourceRecordSets,
		HTTPMethod: "GET",
		HTTPPath:   "/2012-12-12N2013-12-16/hostedzone/{ZoneID}/rrset",
	}

	if input == nil {
		input = &ListResourceRecordSetsInput{}
	}

	req := c.newRequest(op, input, &ListResourceRecordSetsOutput{})

	return ListResourceRecordSetsRequest{Request: req, Input: input, Copy: c.ListResourceRecordSetsRequest}
}

// ListResourceRecordSetsRequest is the request type for the
// ListResourceRecordSets API operation.
type ListResourceRecordSetsRequest struct {
	*aws.Request
	Input *ListResourceRecordSetsInput
	Copy  func(*ListResourceRecordSetsInput) ListResourceRecordSetsRequest
}

// Send marshals and sends the ListResourceRecordSets API request.
func (r ListResourceRecordSetsRequest) Send(ctx context.Context) (*ListResourceRecordSetsResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &ListResourceRecordSetsResponse{
		ListResourceRecordSetsOutput: r.Request.Data.(*ListResourceRecordSetsOutput),
		response:                     &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// ListResourceRecordSetsResponse is the response type for the
// ListResourceRecordSets API operation.
type ListResourceRecordSetsResponse struct {
	*ListResourceRecordSetsOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// ListResourceRecordSets request.
func (r *ListResourceRecordSetsResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
