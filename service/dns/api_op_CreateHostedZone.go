// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package dns

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/private/protocol"
	"github.com/nifcloud/nifcloud-sdk-go/internal/nifcloudutil"
)

type CreateHostedZoneInput struct {
	_ struct{} `locationName:"CreateHostedZoneRequest" type:"structure" xmlURI:"https://route53.amazonaws.com/doc/2012-12-12/"`

	CallerReference *string `locationName:"CallerReference" type:"string"`

	// Name is a required field
	Name *string `locationName:"Name" type:"string" required:"true"`

	RequestHostedZoneConfig *RequestHostedZoneConfig `locationName:"HostedZoneConfig" type:"structure"`
}

// String returns the string representation
func (s CreateHostedZoneInput) String() string {
	return nifcloudutil.Prettify(s)
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CreateHostedZoneInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "CreateHostedZoneInput"}

	if s.Name == nil {
		invalidParams.Add(aws.NewErrParamRequired("Name"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s CreateHostedZoneInput) MarshalFields(e protocol.FieldEncoder) error {

	e.SetFields(protocol.BodyTarget, "CreateHostedZoneRequest", protocol.FieldMarshalerFunc(func(e protocol.FieldEncoder) error {
		if s.CallerReference != nil {
			v := *s.CallerReference

			metadata := protocol.Metadata{}
			e.SetValue(protocol.BodyTarget, "CallerReference", protocol.StringValue(v), metadata)
		}
		if s.Name != nil {
			v := *s.Name

			metadata := protocol.Metadata{}
			e.SetValue(protocol.BodyTarget, "Name", protocol.StringValue(v), metadata)
		}
		if s.RequestHostedZoneConfig != nil {
			v := s.RequestHostedZoneConfig

			metadata := protocol.Metadata{}
			e.SetFields(protocol.BodyTarget, "HostedZoneConfig", v, metadata)
		}
		return nil
	}), protocol.Metadata{XMLNamespaceURI: "https://route53.amazonaws.com/doc/2012-12-12/"})
	return nil
}

type CreateHostedZoneOutput struct {
	_ struct{} `type:"structure"`

	ChangeInfo *ChangeInfo `locationName:"ChangeInfo" type:"structure"`

	DelegationSet *DelegationSet `locationName:"DelegationSet" type:"structure"`

	HostedZone *HostedZone `locationName:"HostedZone" type:"structure"`
}

// String returns the string representation
func (s CreateHostedZoneOutput) String() string {
	return nifcloudutil.Prettify(s)
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s CreateHostedZoneOutput) MarshalFields(e protocol.FieldEncoder) error {
	if s.ChangeInfo != nil {
		v := s.ChangeInfo

		metadata := protocol.Metadata{}
		e.SetFields(protocol.BodyTarget, "ChangeInfo", v, metadata)
	}
	if s.DelegationSet != nil {
		v := s.DelegationSet

		metadata := protocol.Metadata{}
		e.SetFields(protocol.BodyTarget, "DelegationSet", v, metadata)
	}
	if s.HostedZone != nil {
		v := s.HostedZone

		metadata := protocol.Metadata{}
		e.SetFields(protocol.BodyTarget, "HostedZone", v, metadata)
	}
	return nil
}

const opCreateHostedZone = "CreateHostedZone"

// CreateHostedZoneRequest returns a request value for making API operation for
// NIFCLOUD DNS.
//
//    // Example sending a request using CreateHostedZoneRequest.
//    req := client.CreateHostedZoneRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://pfs.nifcloud.com/api/dns/CreateHostedZone.htm
func (c *Client) CreateHostedZoneRequest(input *CreateHostedZoneInput) CreateHostedZoneRequest {
	op := &aws.Operation{
		Name:       opCreateHostedZone,
		HTTPMethod: "POST",
		HTTPPath:   "/2012-12-12N2013-12-16/hostedzone",
	}

	if input == nil {
		input = &CreateHostedZoneInput{}
	}

	req := c.newRequest(op, input, &CreateHostedZoneOutput{})

	return CreateHostedZoneRequest{Request: req, Input: input, Copy: c.CreateHostedZoneRequest}
}

// CreateHostedZoneRequest is the request type for the
// CreateHostedZone API operation.
type CreateHostedZoneRequest struct {
	*aws.Request
	Input *CreateHostedZoneInput
	Copy  func(*CreateHostedZoneInput) CreateHostedZoneRequest
}

// Send marshals and sends the CreateHostedZone API request.
func (r CreateHostedZoneRequest) Send(ctx context.Context) (*CreateHostedZoneResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &CreateHostedZoneResponse{
		CreateHostedZoneOutput: r.Request.Data.(*CreateHostedZoneOutput),
		response:               &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// CreateHostedZoneResponse is the response type for the
// CreateHostedZone API operation.
type CreateHostedZoneResponse struct {
	*CreateHostedZoneOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// CreateHostedZone request.
func (r *CreateHostedZoneResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
