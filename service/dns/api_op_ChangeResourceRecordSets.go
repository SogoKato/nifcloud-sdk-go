// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package dns

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/private/protocol"
	"github.com/nifcloud/nifcloud-sdk-go/internal/nifcloudutil"
)

type ChangeResourceRecordSetsInput struct {
	_ struct{} `locationName:"ChangeResourceRecordSetsRequest" type:"structure" xmlURI:"https://route53.amazonaws.com/doc/2012-12-12/"`

	Comment *string `locationName:"Comment" type:"string"`

	// RequestChangeBatch is a required field
	RequestChangeBatch *RequestChangeBatch `locationName:"ChangeBatch" type:"structure" required:"true"`

	// ZoneID is a required field
	ZoneID *string `location:"uri" locationName:"ZoneID" type:"string" required:"true"`
}

// String returns the string representation
func (s ChangeResourceRecordSetsInput) String() string {
	return nifcloudutil.Prettify(s)
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ChangeResourceRecordSetsInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "ChangeResourceRecordSetsInput"}

	if s.RequestChangeBatch == nil {
		invalidParams.Add(aws.NewErrParamRequired("RequestChangeBatch"))
	}

	if s.ZoneID == nil {
		invalidParams.Add(aws.NewErrParamRequired("ZoneID"))
	}
	if s.RequestChangeBatch != nil {
		if err := s.RequestChangeBatch.Validate(); err != nil {
			invalidParams.AddNested("RequestChangeBatch", err.(aws.ErrInvalidParams))
		}
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s ChangeResourceRecordSetsInput) MarshalFields(e protocol.FieldEncoder) error {

	e.SetFields(protocol.BodyTarget, "ChangeResourceRecordSetsRequest", protocol.FieldMarshalerFunc(func(e protocol.FieldEncoder) error {
		if s.Comment != nil {
			v := *s.Comment

			metadata := protocol.Metadata{}
			e.SetValue(protocol.BodyTarget, "Comment", protocol.StringValue(v), metadata)
		}
		if s.RequestChangeBatch != nil {
			v := s.RequestChangeBatch

			metadata := protocol.Metadata{}
			e.SetFields(protocol.BodyTarget, "ChangeBatch", v, metadata)
		}
		return nil
	}), protocol.Metadata{XMLNamespaceURI: "https://route53.amazonaws.com/doc/2012-12-12/"})
	if s.ZoneID != nil {
		v := *s.ZoneID

		metadata := protocol.Metadata{}
		e.SetValue(protocol.PathTarget, "ZoneID", protocol.StringValue(v), metadata)
	}
	return nil
}

type ChangeResourceRecordSetsOutput struct {
	_ struct{} `type:"structure"`

	ChangeInfo *ChangeInfo `locationName:"ChangeInfo" type:"structure"`
}

// String returns the string representation
func (s ChangeResourceRecordSetsOutput) String() string {
	return nifcloudutil.Prettify(s)
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s ChangeResourceRecordSetsOutput) MarshalFields(e protocol.FieldEncoder) error {
	if s.ChangeInfo != nil {
		v := s.ChangeInfo

		metadata := protocol.Metadata{}
		e.SetFields(protocol.BodyTarget, "ChangeInfo", v, metadata)
	}
	return nil
}

const opChangeResourceRecordSets = "ChangeResourceRecordSets"

// ChangeResourceRecordSetsRequest returns a request value for making API operation for
// NIFCLOUD DNS.
//
//    // Example sending a request using ChangeResourceRecordSetsRequest.
//    req := client.ChangeResourceRecordSetsRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://pfs.nifcloud.com/api/dns/ChangeResourceRecordSets.htm
func (c *Client) ChangeResourceRecordSetsRequest(input *ChangeResourceRecordSetsInput) ChangeResourceRecordSetsRequest {
	op := &aws.Operation{
		Name:       opChangeResourceRecordSets,
		HTTPMethod: "POST",
		HTTPPath:   "/2012-12-12N2013-12-16/hostedzone/{ZoneID}/rrset",
	}

	if input == nil {
		input = &ChangeResourceRecordSetsInput{}
	}

	req := c.newRequest(op, input, &ChangeResourceRecordSetsOutput{})

	return ChangeResourceRecordSetsRequest{Request: req, Input: input, Copy: c.ChangeResourceRecordSetsRequest}
}

// ChangeResourceRecordSetsRequest is the request type for the
// ChangeResourceRecordSets API operation.
type ChangeResourceRecordSetsRequest struct {
	*aws.Request
	Input *ChangeResourceRecordSetsInput
	Copy  func(*ChangeResourceRecordSetsInput) ChangeResourceRecordSetsRequest
}

// Send marshals and sends the ChangeResourceRecordSets API request.
func (r ChangeResourceRecordSetsRequest) Send(ctx context.Context) (*ChangeResourceRecordSetsResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &ChangeResourceRecordSetsResponse{
		ChangeResourceRecordSetsOutput: r.Request.Data.(*ChangeResourceRecordSetsOutput),
		response:                       &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// ChangeResourceRecordSetsResponse is the response type for the
// ChangeResourceRecordSets API operation.
type ChangeResourceRecordSetsResponse struct {
	*ChangeResourceRecordSetsOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// ChangeResourceRecordSets request.
func (r *ChangeResourceRecordSetsResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
