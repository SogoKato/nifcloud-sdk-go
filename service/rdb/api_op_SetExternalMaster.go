// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package rdb

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/nifcloud/nifcloud-sdk-go/internal/nifcloudutil"
)

type SetExternalMasterInput struct {
	_ struct{} `type:"structure"`

	// BinlogFileName is a required field
	BinlogFileName *string `locationName:"BinlogFileName" type:"string" required:"true"`

	// BinlogPosition is a required field
	BinlogPosition *int64 `locationName:"BinlogPosition" type:"integer" required:"true"`

	// DBInstanceIdentifier is a required field
	DBInstanceIdentifier *string `locationName:"DBInstanceIdentifier" type:"string" required:"true"`

	// MasterHost is a required field
	MasterHost *string `locationName:"MasterHost" type:"string" required:"true"`

	MasterPort *int64 `locationName:"MasterPort" type:"integer"`

	// ReplicationUserName is a required field
	ReplicationUserName *string `locationName:"ReplicationUserName" type:"string" required:"true"`

	// ReplicationUserPassword is a required field
	ReplicationUserPassword *string `locationName:"ReplicationUserPassword" type:"string" required:"true"`
}

// String returns the string representation
func (s SetExternalMasterInput) String() string {
	return nifcloudutil.Prettify(s)
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *SetExternalMasterInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "SetExternalMasterInput"}

	if s.BinlogFileName == nil {
		invalidParams.Add(aws.NewErrParamRequired("BinlogFileName"))
	}

	if s.BinlogPosition == nil {
		invalidParams.Add(aws.NewErrParamRequired("BinlogPosition"))
	}

	if s.DBInstanceIdentifier == nil {
		invalidParams.Add(aws.NewErrParamRequired("DBInstanceIdentifier"))
	}

	if s.MasterHost == nil {
		invalidParams.Add(aws.NewErrParamRequired("MasterHost"))
	}

	if s.ReplicationUserName == nil {
		invalidParams.Add(aws.NewErrParamRequired("ReplicationUserName"))
	}

	if s.ReplicationUserPassword == nil {
		invalidParams.Add(aws.NewErrParamRequired("ReplicationUserPassword"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

type SetExternalMasterOutput struct {
	_ struct{} `type:"structure"`

	DBInstance *DBInstance `locationName:"DBInstance" type:"structure"`

	ResponseMetadata *ResponseMetadata `locationName:"ResponseMetadata" type:"structure"`
}

// String returns the string representation
func (s SetExternalMasterOutput) String() string {
	return nifcloudutil.Prettify(s)
}

const opSetExternalMaster = "SetExternalMaster"

// SetExternalMasterRequest returns a request value for making API operation for
// NIFCLOUD RDB.
//
//    // Example sending a request using SetExternalMasterRequest.
//    req := client.SetExternalMasterRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://pfs.nifcloud.com/api/rdb/SetExternalMaster.htm
func (c *Client) SetExternalMasterRequest(input *SetExternalMasterInput) SetExternalMasterRequest {
	op := &aws.Operation{
		Name:       opSetExternalMaster,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &SetExternalMasterInput{}
	}

	req := c.newRequest(op, input, &SetExternalMasterOutput{})

	return SetExternalMasterRequest{Request: req, Input: input, Copy: c.SetExternalMasterRequest}
}

// SetExternalMasterRequest is the request type for the
// SetExternalMaster API operation.
type SetExternalMasterRequest struct {
	*aws.Request
	Input *SetExternalMasterInput
	Copy  func(*SetExternalMasterInput) SetExternalMasterRequest
}

// Send marshals and sends the SetExternalMaster API request.
func (r SetExternalMasterRequest) Send(ctx context.Context) (*SetExternalMasterResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &SetExternalMasterResponse{
		SetExternalMasterOutput: r.Request.Data.(*SetExternalMasterOutput),
		response:                &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// SetExternalMasterResponse is the response type for the
// SetExternalMaster API operation.
type SetExternalMasterResponse struct {
	*SetExternalMasterOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// SetExternalMaster request.
func (r *SetExternalMasterResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
