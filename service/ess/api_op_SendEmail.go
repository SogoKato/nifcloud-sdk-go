// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package ess

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/nifcloud/nifcloud-sdk-go/internal/nifcloudutil"
)

type SendEmailInput struct {
	_ struct{} `type:"structure"`

	Destination *RequestDestination `locationName:"Destination" type:"structure"`

	Message *RequestMessage `locationName:"Message" type:"structure"`

	ReplyToAddresses []string `locationName:"ReplyToAddresses" locationNameList:"member" type:"list"`

	ReturnPath *string `locationName:"ReturnPath" type:"string"`

	// Source is a required field
	Source *string `locationName:"Source" type:"string" required:"true"`
}

// String returns the string representation
func (s SendEmailInput) String() string {
	return nifcloudutil.Prettify(s)
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *SendEmailInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "SendEmailInput"}

	if s.Source == nil {
		invalidParams.Add(aws.NewErrParamRequired("Source"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

type SendEmailOutput struct {
	_ struct{} `type:"structure"`

	MessageId *string `locationName:"MessageId" type:"string"`

	ResponseMetadata *ResponseMetadata `locationName:"ResponseMetadata" type:"structure"`
}

// String returns the string representation
func (s SendEmailOutput) String() string {
	return nifcloudutil.Prettify(s)
}

const opSendEmail = "SendEmail"

// SendEmailRequest returns a request value for making API operation for
// NIFCLOUD ESS.
//
//    // Example sending a request using SendEmailRequest.
//    req := client.SendEmailRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://pfs.nifcloud.com/api/ess/SendEmail.htm
func (c *Client) SendEmailRequest(input *SendEmailInput) SendEmailRequest {
	op := &aws.Operation{
		Name:       opSendEmail,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &SendEmailInput{}
	}

	req := c.newRequest(op, input, &SendEmailOutput{})

	return SendEmailRequest{Request: req, Input: input, Copy: c.SendEmailRequest}
}

// SendEmailRequest is the request type for the
// SendEmail API operation.
type SendEmailRequest struct {
	*aws.Request
	Input *SendEmailInput
	Copy  func(*SendEmailInput) SendEmailRequest
}

// Send marshals and sends the SendEmail API request.
func (r SendEmailRequest) Send(ctx context.Context) (*SendEmailResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &SendEmailResponse{
		SendEmailOutput: r.Request.Data.(*SendEmailOutput),
		response:        &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// SendEmailResponse is the response type for the
// SendEmail API operation.
type SendEmailResponse struct {
	*SendEmailOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// SendEmail request.
func (r *SendEmailResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
