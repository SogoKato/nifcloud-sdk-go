// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package computing

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/nifcloud/nifcloud-sdk-go/internal/nifcloudutil"
)

type UploadIsoImageInput struct {
	_ struct{} `type:"structure"`

	AvailabilityZone *string `locationName:"AvailabilityZone" type:"string"`

	Description *string `locationName:"Description" type:"string"`

	IsoImageName *string `locationName:"IsoImageName" type:"string"`

	// IsoUrl is a required field
	IsoUrl *string `locationName:"IsoUrl" type:"string" required:"true"`
}

// String returns the string representation
func (s UploadIsoImageInput) String() string {
	return nifcloudutil.Prettify(s)
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *UploadIsoImageInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "UploadIsoImageInput"}

	if s.IsoUrl == nil {
		invalidParams.Add(aws.NewErrParamRequired("IsoUrl"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

type UploadIsoImageOutput struct {
	_ struct{} `type:"structure"`

	RequestId *string `locationName:"requestId" type:"string"`

	Return *bool `locationName:"return" type:"boolean"`
}

// String returns the string representation
func (s UploadIsoImageOutput) String() string {
	return nifcloudutil.Prettify(s)
}

const opUploadIsoImage = "UploadIsoImage"

// UploadIsoImageRequest returns a request value for making API operation for
// NIFCLOUD Computing.
//
//    // Example sending a request using UploadIsoImageRequest.
//    req := client.UploadIsoImageRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://pfs.nifcloud.com/api/rest/UploadIsoImage.htm
func (c *Client) UploadIsoImageRequest(input *UploadIsoImageInput) UploadIsoImageRequest {
	op := &aws.Operation{
		Name:       opUploadIsoImage,
		HTTPMethod: "POST",
		HTTPPath:   "/api/",
	}

	if input == nil {
		input = &UploadIsoImageInput{}
	}

	req := c.newRequest(op, input, &UploadIsoImageOutput{})

	return UploadIsoImageRequest{Request: req, Input: input, Copy: c.UploadIsoImageRequest}
}

// UploadIsoImageRequest is the request type for the
// UploadIsoImage API operation.
type UploadIsoImageRequest struct {
	*aws.Request
	Input *UploadIsoImageInput
	Copy  func(*UploadIsoImageInput) UploadIsoImageRequest
}

// Send marshals and sends the UploadIsoImage API request.
func (r UploadIsoImageRequest) Send(ctx context.Context) (*UploadIsoImageResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &UploadIsoImageResponse{
		UploadIsoImageOutput: r.Request.Data.(*UploadIsoImageOutput),
		response:             &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// UploadIsoImageResponse is the response type for the
// UploadIsoImage API operation.
type UploadIsoImageResponse struct {
	*UploadIsoImageOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// UploadIsoImage request.
func (r *UploadIsoImageResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
