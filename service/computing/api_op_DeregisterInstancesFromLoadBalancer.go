// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package computing

import (
	"context"
	"fmt"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/nifcloud/nifcloud-sdk-go/internal/nifcloudutil"
)

type DeregisterInstancesFromLoadBalancerInput struct {
	_ struct{} `type:"structure"`

	// InstancePort is a required field
	InstancePort *int64 `locationName:"InstancePort" type:"integer" required:"true"`

	// Instances is a required field
	Instances []RequestInstances `locationName:"Instances" locationNameList:"member" type:"list" required:"true"`

	// LoadBalancerName is a required field
	LoadBalancerName *string `locationName:"LoadBalancerName" type:"string" required:"true"`

	// LoadBalancerPort is a required field
	LoadBalancerPort *int64 `locationName:"LoadBalancerPort" type:"integer" required:"true"`
}

// String returns the string representation
func (s DeregisterInstancesFromLoadBalancerInput) String() string {
	return nifcloudutil.Prettify(s)
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DeregisterInstancesFromLoadBalancerInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "DeregisterInstancesFromLoadBalancerInput"}

	if s.InstancePort == nil {
		invalidParams.Add(aws.NewErrParamRequired("InstancePort"))
	}

	if s.Instances == nil {
		invalidParams.Add(aws.NewErrParamRequired("Instances"))
	}

	if s.LoadBalancerName == nil {
		invalidParams.Add(aws.NewErrParamRequired("LoadBalancerName"))
	}

	if s.LoadBalancerPort == nil {
		invalidParams.Add(aws.NewErrParamRequired("LoadBalancerPort"))
	}
	if s.Instances != nil {
		for i, v := range s.Instances {
			if err := v.Validate(); err != nil {
				invalidParams.AddNested(fmt.Sprintf("%s[%v]", "Instances", i), err.(aws.ErrInvalidParams))
			}
		}
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

type DeregisterInstancesFromLoadBalancerOutput struct {
	_ struct{} `type:"structure"`

	DeregisterInstancesFromLoadBalancerResult *DeregisterInstancesFromLoadBalancerResult `locationName:"DeregisterInstancesFromLoadBalancerResult" type:"structure"`

	ResponseMetadata *ResponseMetadata `locationName:"ResponseMetadata" type:"structure"`
}

// String returns the string representation
func (s DeregisterInstancesFromLoadBalancerOutput) String() string {
	return nifcloudutil.Prettify(s)
}

const opDeregisterInstancesFromLoadBalancer = "DeregisterInstancesFromLoadBalancer"

// DeregisterInstancesFromLoadBalancerRequest returns a request value for making API operation for
// NIFCLOUD Computing.
//
//    // Example sending a request using DeregisterInstancesFromLoadBalancerRequest.
//    req := client.DeregisterInstancesFromLoadBalancerRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://pfs.nifcloud.com/api/rest/DeregisterInstancesFromLoadBalancer.htm
func (c *Client) DeregisterInstancesFromLoadBalancerRequest(input *DeregisterInstancesFromLoadBalancerInput) DeregisterInstancesFromLoadBalancerRequest {
	op := &aws.Operation{
		Name:       opDeregisterInstancesFromLoadBalancer,
		HTTPMethod: "POST",
		HTTPPath:   "/api/",
	}

	if input == nil {
		input = &DeregisterInstancesFromLoadBalancerInput{}
	}

	req := c.newRequest(op, input, &DeregisterInstancesFromLoadBalancerOutput{})

	return DeregisterInstancesFromLoadBalancerRequest{Request: req, Input: input, Copy: c.DeregisterInstancesFromLoadBalancerRequest}
}

// DeregisterInstancesFromLoadBalancerRequest is the request type for the
// DeregisterInstancesFromLoadBalancer API operation.
type DeregisterInstancesFromLoadBalancerRequest struct {
	*aws.Request
	Input *DeregisterInstancesFromLoadBalancerInput
	Copy  func(*DeregisterInstancesFromLoadBalancerInput) DeregisterInstancesFromLoadBalancerRequest
}

// Send marshals and sends the DeregisterInstancesFromLoadBalancer API request.
func (r DeregisterInstancesFromLoadBalancerRequest) Send(ctx context.Context) (*DeregisterInstancesFromLoadBalancerResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &DeregisterInstancesFromLoadBalancerResponse{
		DeregisterInstancesFromLoadBalancerOutput: r.Request.Data.(*DeregisterInstancesFromLoadBalancerOutput),
		response: &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// DeregisterInstancesFromLoadBalancerResponse is the response type for the
// DeregisterInstancesFromLoadBalancer API operation.
type DeregisterInstancesFromLoadBalancerResponse struct {
	*DeregisterInstancesFromLoadBalancerOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// DeregisterInstancesFromLoadBalancer request.
func (r *DeregisterInstancesFromLoadBalancerResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
