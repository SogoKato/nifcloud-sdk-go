// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package computing

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/nifcloud/nifcloud-sdk-go/internal/nifcloudutil"
)

type UpdateLoadBalancerOptionInput struct {
	_ struct{} `type:"structure"`

	InstancePort *int64 `locationName:"InstancePort" type:"integer"`

	LoadBalancerName *string `locationName:"LoadBalancerName" type:"string"`

	LoadBalancerPort *int64 `locationName:"LoadBalancerPort" type:"integer"`

	SessionStickinessPolicyUpdate *RequestSessionStickinessPolicyUpdate `locationName:"SessionStickinessPolicyUpdate" type:"structure"`

	SorryPageUpdate *RequestSorryPageUpdate `locationName:"SorryPageUpdate" type:"structure"`
}

// String returns the string representation
func (s UpdateLoadBalancerOptionInput) String() string {
	return nifcloudutil.Prettify(s)
}

type UpdateLoadBalancerOptionOutput struct {
	_ struct{} `type:"structure"`

	ResponseMetadata *ResponseMetadataOfUpdateLoadBalancerOption `locationName:"ResponseMetadata" type:"structure"`
}

// String returns the string representation
func (s UpdateLoadBalancerOptionOutput) String() string {
	return nifcloudutil.Prettify(s)
}

const opUpdateLoadBalancerOption = "UpdateLoadBalancerOption"

// UpdateLoadBalancerOptionRequest returns a request value for making API operation for
// NIFCLOUD Computing.
//
//    // Example sending a request using UpdateLoadBalancerOptionRequest.
//    req := client.UpdateLoadBalancerOptionRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://pfs.nifcloud.com/api/rest/UpdateLoadBalancerOption.htm
func (c *Client) UpdateLoadBalancerOptionRequest(input *UpdateLoadBalancerOptionInput) UpdateLoadBalancerOptionRequest {
	op := &aws.Operation{
		Name:       opUpdateLoadBalancerOption,
		HTTPMethod: "POST",
		HTTPPath:   "/api/",
	}

	if input == nil {
		input = &UpdateLoadBalancerOptionInput{}
	}

	req := c.newRequest(op, input, &UpdateLoadBalancerOptionOutput{})

	return UpdateLoadBalancerOptionRequest{Request: req, Input: input, Copy: c.UpdateLoadBalancerOptionRequest}
}

// UpdateLoadBalancerOptionRequest is the request type for the
// UpdateLoadBalancerOption API operation.
type UpdateLoadBalancerOptionRequest struct {
	*aws.Request
	Input *UpdateLoadBalancerOptionInput
	Copy  func(*UpdateLoadBalancerOptionInput) UpdateLoadBalancerOptionRequest
}

// Send marshals and sends the UpdateLoadBalancerOption API request.
func (r UpdateLoadBalancerOptionRequest) Send(ctx context.Context) (*UpdateLoadBalancerOptionResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &UpdateLoadBalancerOptionResponse{
		UpdateLoadBalancerOptionOutput: r.Request.Data.(*UpdateLoadBalancerOptionOutput),
		response:                       &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// UpdateLoadBalancerOptionResponse is the response type for the
// UpdateLoadBalancerOption API operation.
type UpdateLoadBalancerOptionResponse struct {
	*UpdateLoadBalancerOptionOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// UpdateLoadBalancerOption request.
func (r *UpdateLoadBalancerOptionResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
