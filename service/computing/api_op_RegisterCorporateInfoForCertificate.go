// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package computing

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/nifcloud/nifcloud-sdk-go/internal/nifcloudutil"
)

type RegisterCorporateInfoForCertificateInput struct {
	_ struct{} `type:"structure"`

	// Agreement is a required field
	Agreement *bool `locationName:"Agreement" type:"boolean" required:"true"`

	// AlphabetName1 is a required field
	AlphabetName1 *string `locationName:"AlphabetName1" type:"string" required:"true"`

	// AlphabetName2 is a required field
	AlphabetName2 *string `locationName:"AlphabetName2" type:"string" required:"true"`

	// City is a required field
	City *string `locationName:"City" type:"string" required:"true"`

	// CorpGrade is a required field
	CorpGrade *string `locationName:"CorpGrade" type:"string" required:"true"`

	// CorpName is a required field
	CorpName *string `locationName:"CorpName" type:"string" required:"true"`

	// DivisionName is a required field
	DivisionName *string `locationName:"DivisionName" type:"string" required:"true"`

	// EmailAddress is a required field
	EmailAddress *string `locationName:"EmailAddress" type:"string" required:"true"`

	// KanaName1 is a required field
	KanaName1 *string `locationName:"KanaName1" type:"string" required:"true"`

	// KanaName2 is a required field
	KanaName2 *string `locationName:"KanaName2" type:"string" required:"true"`

	// Name1 is a required field
	Name1 *string `locationName:"Name1" type:"string" required:"true"`

	// Name2 is a required field
	Name2 *string `locationName:"Name2" type:"string" required:"true"`

	// PhoneNumber is a required field
	PhoneNumber *string `locationName:"PhoneNumber" type:"string" required:"true"`

	// PostName is a required field
	PostName *string `locationName:"PostName" type:"string" required:"true"`

	// Pref is a required field
	Pref *string `locationName:"Pref" type:"string" required:"true"`

	// PresidentName1 is a required field
	PresidentName1 *string `locationName:"PresidentName1" type:"string" required:"true"`

	// PresidentName2 is a required field
	PresidentName2 *string `locationName:"PresidentName2" type:"string" required:"true"`

	TdbCode *string `locationName:"TdbCode" type:"string"`

	// Zip1 is a required field
	Zip1 *string `locationName:"Zip1" type:"string" required:"true"`

	// Zip2 is a required field
	Zip2 *string `locationName:"Zip2" type:"string" required:"true"`
}

// String returns the string representation
func (s RegisterCorporateInfoForCertificateInput) String() string {
	return nifcloudutil.Prettify(s)
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *RegisterCorporateInfoForCertificateInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "RegisterCorporateInfoForCertificateInput"}

	if s.Agreement == nil {
		invalidParams.Add(aws.NewErrParamRequired("Agreement"))
	}

	if s.AlphabetName1 == nil {
		invalidParams.Add(aws.NewErrParamRequired("AlphabetName1"))
	}

	if s.AlphabetName2 == nil {
		invalidParams.Add(aws.NewErrParamRequired("AlphabetName2"))
	}

	if s.City == nil {
		invalidParams.Add(aws.NewErrParamRequired("City"))
	}

	if s.CorpGrade == nil {
		invalidParams.Add(aws.NewErrParamRequired("CorpGrade"))
	}

	if s.CorpName == nil {
		invalidParams.Add(aws.NewErrParamRequired("CorpName"))
	}

	if s.DivisionName == nil {
		invalidParams.Add(aws.NewErrParamRequired("DivisionName"))
	}

	if s.EmailAddress == nil {
		invalidParams.Add(aws.NewErrParamRequired("EmailAddress"))
	}

	if s.KanaName1 == nil {
		invalidParams.Add(aws.NewErrParamRequired("KanaName1"))
	}

	if s.KanaName2 == nil {
		invalidParams.Add(aws.NewErrParamRequired("KanaName2"))
	}

	if s.Name1 == nil {
		invalidParams.Add(aws.NewErrParamRequired("Name1"))
	}

	if s.Name2 == nil {
		invalidParams.Add(aws.NewErrParamRequired("Name2"))
	}

	if s.PhoneNumber == nil {
		invalidParams.Add(aws.NewErrParamRequired("PhoneNumber"))
	}

	if s.PostName == nil {
		invalidParams.Add(aws.NewErrParamRequired("PostName"))
	}

	if s.Pref == nil {
		invalidParams.Add(aws.NewErrParamRequired("Pref"))
	}

	if s.PresidentName1 == nil {
		invalidParams.Add(aws.NewErrParamRequired("PresidentName1"))
	}

	if s.PresidentName2 == nil {
		invalidParams.Add(aws.NewErrParamRequired("PresidentName2"))
	}

	if s.Zip1 == nil {
		invalidParams.Add(aws.NewErrParamRequired("Zip1"))
	}

	if s.Zip2 == nil {
		invalidParams.Add(aws.NewErrParamRequired("Zip2"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

type RegisterCorporateInfoForCertificateOutput struct {
	_ struct{} `type:"structure"`

	AlphabetName1 *string `locationName:"alphabetName1" type:"string"`

	AlphabetName2 *string `locationName:"alphabetName2" type:"string"`

	City *string `locationName:"city" type:"string"`

	CorpGrade *string `locationName:"corpGrade" type:"string"`

	CorpName *string `locationName:"corpName" type:"string"`

	DivisionName *string `locationName:"divisionName" type:"string"`

	EmailAddress *string `locationName:"emailAddress" type:"string"`

	KanaName1 *string `locationName:"kanaName1" type:"string"`

	KanaName2 *string `locationName:"kanaName2" type:"string"`

	Name1 *string `locationName:"name1" type:"string"`

	Name2 *string `locationName:"name2" type:"string"`

	PhoneNumber *string `locationName:"phoneNumber" type:"string"`

	PostName *string `locationName:"postName" type:"string"`

	Pref *string `locationName:"pref" type:"string"`

	PresidentName1 *string `locationName:"presidentName1" type:"string"`

	PresidentName2 *string `locationName:"presidentName2" type:"string"`

	RequestId *string `locationName:"requestId" type:"string"`

	TdbCode *string `locationName:"tdbCode" type:"string"`

	Zip1 *string `locationName:"zip1" type:"string"`

	Zip2 *string `locationName:"zip2" type:"string"`
}

// String returns the string representation
func (s RegisterCorporateInfoForCertificateOutput) String() string {
	return nifcloudutil.Prettify(s)
}

const opRegisterCorporateInfoForCertificate = "RegisterCorporateInfoForCertificate"

// RegisterCorporateInfoForCertificateRequest returns a request value for making API operation for
// NIFCLOUD Computing.
//
//    // Example sending a request using RegisterCorporateInfoForCertificateRequest.
//    req := client.RegisterCorporateInfoForCertificateRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://pfs.nifcloud.com/api/rest/RegisterCorporateInfoForCertificate.htm
func (c *Client) RegisterCorporateInfoForCertificateRequest(input *RegisterCorporateInfoForCertificateInput) RegisterCorporateInfoForCertificateRequest {
	op := &aws.Operation{
		Name:       opRegisterCorporateInfoForCertificate,
		HTTPMethod: "POST",
		HTTPPath:   "/api/",
	}

	if input == nil {
		input = &RegisterCorporateInfoForCertificateInput{}
	}

	req := c.newRequest(op, input, &RegisterCorporateInfoForCertificateOutput{})

	return RegisterCorporateInfoForCertificateRequest{Request: req, Input: input, Copy: c.RegisterCorporateInfoForCertificateRequest}
}

// RegisterCorporateInfoForCertificateRequest is the request type for the
// RegisterCorporateInfoForCertificate API operation.
type RegisterCorporateInfoForCertificateRequest struct {
	*aws.Request
	Input *RegisterCorporateInfoForCertificateInput
	Copy  func(*RegisterCorporateInfoForCertificateInput) RegisterCorporateInfoForCertificateRequest
}

// Send marshals and sends the RegisterCorporateInfoForCertificate API request.
func (r RegisterCorporateInfoForCertificateRequest) Send(ctx context.Context) (*RegisterCorporateInfoForCertificateResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &RegisterCorporateInfoForCertificateResponse{
		RegisterCorporateInfoForCertificateOutput: r.Request.Data.(*RegisterCorporateInfoForCertificateOutput),
		response: &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// RegisterCorporateInfoForCertificateResponse is the response type for the
// RegisterCorporateInfoForCertificate API operation.
type RegisterCorporateInfoForCertificateResponse struct {
	*RegisterCorporateInfoForCertificateOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// RegisterCorporateInfoForCertificate request.
func (r *RegisterCorporateInfoForCertificateResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
