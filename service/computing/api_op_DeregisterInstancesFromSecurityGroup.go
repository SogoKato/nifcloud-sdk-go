// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package computing

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/nifcloud/nifcloud-sdk-go/internal/nifcloudutil"
)

type DeregisterInstancesFromSecurityGroupInput struct {
	_ struct{} `type:"structure"`

	// GroupName is a required field
	GroupName *string `locationName:"GroupName" type:"string" required:"true"`

	// InstanceId is a required field
	InstanceId []string `locationName:"InstanceId" type:"list" required:"true"`
}

// String returns the string representation
func (s DeregisterInstancesFromSecurityGroupInput) String() string {
	return nifcloudutil.Prettify(s)
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DeregisterInstancesFromSecurityGroupInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "DeregisterInstancesFromSecurityGroupInput"}

	if s.GroupName == nil {
		invalidParams.Add(aws.NewErrParamRequired("GroupName"))
	}

	if s.InstanceId == nil {
		invalidParams.Add(aws.NewErrParamRequired("InstanceId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

type DeregisterInstancesFromSecurityGroupOutput struct {
	_ struct{} `type:"structure"`

	InstancesSet []InstancesSetOfDeregisterInstancesFromSecurityGroup `locationName:"instancesSet" locationNameList:"item" type:"list"`

	RequestId *string `locationName:"requestId" type:"string"`
}

// String returns the string representation
func (s DeregisterInstancesFromSecurityGroupOutput) String() string {
	return nifcloudutil.Prettify(s)
}

const opDeregisterInstancesFromSecurityGroup = "DeregisterInstancesFromSecurityGroup"

// DeregisterInstancesFromSecurityGroupRequest returns a request value for making API operation for
// NIFCLOUD Computing.
//
//    // Example sending a request using DeregisterInstancesFromSecurityGroupRequest.
//    req := client.DeregisterInstancesFromSecurityGroupRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://pfs.nifcloud.com/api/rest/DeregisterInstancesFromSecurityGroup.htm
func (c *Client) DeregisterInstancesFromSecurityGroupRequest(input *DeregisterInstancesFromSecurityGroupInput) DeregisterInstancesFromSecurityGroupRequest {
	op := &aws.Operation{
		Name:       opDeregisterInstancesFromSecurityGroup,
		HTTPMethod: "POST",
		HTTPPath:   "/api/",
	}

	if input == nil {
		input = &DeregisterInstancesFromSecurityGroupInput{}
	}

	req := c.newRequest(op, input, &DeregisterInstancesFromSecurityGroupOutput{})

	return DeregisterInstancesFromSecurityGroupRequest{Request: req, Input: input, Copy: c.DeregisterInstancesFromSecurityGroupRequest}
}

// DeregisterInstancesFromSecurityGroupRequest is the request type for the
// DeregisterInstancesFromSecurityGroup API operation.
type DeregisterInstancesFromSecurityGroupRequest struct {
	*aws.Request
	Input *DeregisterInstancesFromSecurityGroupInput
	Copy  func(*DeregisterInstancesFromSecurityGroupInput) DeregisterInstancesFromSecurityGroupRequest
}

// Send marshals and sends the DeregisterInstancesFromSecurityGroup API request.
func (r DeregisterInstancesFromSecurityGroupRequest) Send(ctx context.Context) (*DeregisterInstancesFromSecurityGroupResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &DeregisterInstancesFromSecurityGroupResponse{
		DeregisterInstancesFromSecurityGroupOutput: r.Request.Data.(*DeregisterInstancesFromSecurityGroupOutput),
		response: &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// DeregisterInstancesFromSecurityGroupResponse is the response type for the
// DeregisterInstancesFromSecurityGroup API operation.
type DeregisterInstancesFromSecurityGroupResponse struct {
	*DeregisterInstancesFromSecurityGroupOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// DeregisterInstancesFromSecurityGroup request.
func (r *DeregisterInstancesFromSecurityGroupResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
